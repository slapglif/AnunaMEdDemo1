# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest

from app.api.user.schema import User
from app.shared.redis.redis_services import Online


"""
Code Analysis

Main functionalities:
The Online class is used to represent a list of users that are currently online. 
It is a Pydantic BaseModel that defines a list of User objects as its field. 
This class is useful for keeping track of users who are currently active on a platform or application.

Methods:
The Online class does not have any methods defined within it. However, since it is a Pydantic BaseModel, it inherits several methods that can be used to manipulate and validate its fields. These methods include dict(), json(), and parse_obj().

Fields:
The Online class has only one field, which is a list of User objects. This field is defined as a List[User] and is initialized to an empty list. The User object is defined in another module and is used to represent a user's data, such as their username, email, and password. The users field in the Online class is useful for keeping track of which users are currently online.
"""

class TestOnline:
    #  Tests that a user can be added to the online list. Tags: [happy path]
    def test_add_user_to_online_list(self):
        # happy path test
        user = User(username="test_user")
        online = Online(users=[user])
        assert user in online.users

    #  Tests that a user can be removed from the online list. Tags: [happy path]
    def test_remove_user_from_online_list(self):
        # happy path test
        user = User(username="test_user")
        online = Online(users=[user])
        online.users.remove(user)
        assert user not in online.users

    #  Tests that the online list is empty when no users are online. Tags: [edge case]
    def test_empty_list_of_online_users(self, mocker):
        # edge case test
        online = Online()
        assert len(online.users) == 0

    #  Tests that a user cannot be added to the online list if they are already online. Tags: [edge case]
    def test_add_existing_user_to_online_list(self):
        # edge case test
        user = User(username="test_user")
        online = Online()
        online.users.append(user)
        assert len(online.users) == 1

    #  Tests that the list of online users can be retrieved. Tags: [happy path]
    def test_retrieve_online_users(self):
        # happy path test
        user1 = User(username="test_user1")
        user2 = User(username="test_user2")
        online = Online(users=[user1, user2])
        assert len(online.users) == 2

    #  Tests that a user cannot be removed from the online list if they are not online. Tags: [edge case]
    def test_remove_nonexistent_user_from_online_list(self):
        # edge case test
        user = User(username="test_user")
        online = Online()
        with pytest.raises(ValueError):
            online.users.remove(user)
